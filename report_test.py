from collections import defaultdict
from typing import NamedTuple
import argparse

import numpy as np


class NavLog(NamedTuple):
    world_idx: int
    succeeded: bool
    collided: bool
    timeout: bool
    time: float
    nav_metric: float
        
if __name__ == "__main__":
    
    parser = argparse.ArgumentParser(description = 'report test results')
    parser.add_argument("--out_path", type=str, help="path to the out file generated by the test")
    
    args = parser.parse_args()
    
    results = defaultdict(list)
    with open(args.out_path, "r") as f:
        for l in f.readlines():
            logs = l.split(" ")
            world_idx = int(logs[0])
            nav_log = NavLog(
                world_idx,
                bool(int(logs[1])),
                bool(int(logs[2])),
                bool(int(logs[3])),
                float(logs[4]),
                float(logs[5]),
            )
            results[world_idx].append(nav_log)

    for idx in range(50):
        if not idx * 6 in results.keys():
            print("Missing world_%d" %(idx * 6))
        elif len(results[idx * 6]) < 10:
            print("Test on world_%d not finished (%d/10)" %(idx * 60, len(results[idx * 6])))
    
    print("Avg Time: %.4f, Avg Metric: %.4f, Avg Success: %.4f, Avg Collision: %.4f, Avg Timeout: %.4f" %(
        np.mean([np.mean([nl.time for nl in results[k]]) for k in results.keys()]),
        np.mean([np.mean([nl.nav_metric for nl in results[k]]) for k in results.keys()]),
        np.mean([np.mean([nl.succeeded for nl in results[k]]) for k in results.keys()]),
        np.mean([np.mean([nl.collided for nl in results[k]]) for k in results.keys()]),
        np.mean([np.mean([nl.timeout for nl in results[k]]) for k in results.keys()]),
    ))